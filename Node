/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package BplusTree;

/**
 *
 * @author Noah
 */

import java.util.ArrayList;
import java.util.Collections;

public class Node
{
 private int n = 3;
 private int element;
 private ArrayList<Integer> keyList;
 private ArrayList<Node> children;
 private ArrayList<Node> oldChildren;
 private Node sibling;
 private Node parent;
 private Node splitOne;
 private Node splitTwo;
 
 private int childCount = 0;
 private boolean root = false;

 public Node(boolean r)
 {
  keyList = new ArrayList();
  children = new ArrayList();
  parent = null;
  root = r;
  if (root == true)
     {
      oldChildren = new ArrayList();   
     } 
 }        
 
 public int getN()
 {
    return n;
 } 
 
 public void setParent(Node p)
 {
    parent = p;
 }
 
 public Node getParent()
 {
    return parent; 
 }        
 
 public boolean checkIfRoot()
 {
    return root;
 }     
 
 public ArrayList getKeyList()
 {
    return keyList;   
 }
 
 public int getKey(int i)
 {
    return keyList.get(i);
 }        
 
 public ArrayList<Node> getChildren()
 {
    return children;   
 }        
 
 public int getChildCount()
 {
     return childCount;
 }  
 
 public Node getChild(int i)
 {
     return children.get(i);
 }        
         
 public void setKey(int e)
 {
    keyList.add(e);
    Collections.sort(keyList);
    if (keyList.size() >= n)
       {
        split();   
       } 
 }   
 
 public void addChild()
 {
    childCount ++;
    children.add(new Node(false));
 }          
 
 public void addSpecificChild(Node c)
 {
     childCount ++;
     children.add(c);
 }        
 
 public void addRootParent()
 {
     
 }   
 
 public boolean itemSearch(int key)
 {
    if (keyList.contains(key))
       {
        return true;
       }
    else
       {
        return false; 
       } 
 }       
         
 public void split()
 {
     int mid = n/2;
     int midKey = keyList.get((n/2));
     int index = 0;
     if (checkIfRoot() == true)
        {
         if (children.size() > 0)
            { 
             for (int i = 0; i < children.size()-1; i ++)
                 {
                  oldChildren.add(children.get(i));   
                 }
            } 
         
         addChild();
         splitOne = children.get(children.size()-1);
         for (int i = 0; i < mid; i ++)
             {
              splitOne.setKey(keyList.get(i));
              if (oldChildren.size() > 0)
                 { 
                  for (int q = 0; q < mid; q ++)
                      {
                       splitOne.children.add(oldChildren.get(q));
                      }
                  for (int q = 0; q < mid; q ++)
                      {
                       System.out.println("WHY");
                       System.out.println(oldChildren.size());
                       children.remove(q);
                      }
                 }     
             }
         System.out.print("Child1:");
         System.out.println(children.get(0));
         addChild();
         splitOne = children.get(children.size()-1);
         for (int i = mid; i < n; i ++)
             {
              splitOne.setKey(keyList.get(i));
              if (oldChildren.size() > 0)
                 { 
                  for (int q = mid; q < oldChildren.size()-1; q ++)
                      {
                       splitOne.children.add(oldChildren.get(q));
                      }
                  for (int q = mid; q < children.size()-3; q ++)
                      {
                       System.out.println("WHY2");
                       System.out.println(oldChildren.size());
                       children.remove(q);
                      }
                 }     
             }
         //children.get(children.size()-2).addSpecificChild(children.get(childCount-1));
         System.out.print("Child2:");
         System.out.println(children.get(1));
         while (keyList.size() != 1)
             {
              if (keyList.get(index) != midKey)
                 {
                  //System.out.println("removed");
                  keyList.remove(index);
                 }
              index ++;
             }
        } 
     else
        {
         //System.out.println("parent");
         //System.out.println(parent.toString());
         parent.addChild();
         sibling = parent.children.get(parent.children.size()-1);
         for (int i = mid; i < n; i ++)
             {
              //System.out.println(parent.children.toString());
              sibling.setKey(keyList.get(i));
             }
         while(keyList.size() > mid)
             {
              //System.out.println("splitcheck");
              //System.out.println(keyList.get(keyList.size()-1));
              if (keyList.get(keyList.size()-1) >= midKey)
                 {     
                  keyList.remove(keyList.size()-1);
                 } 
             }
         parent.setKey(midKey);
        } 
 }
 
 public String toString()
 {
     String result = "";
     for (int i = 0; i < keyList.size(); i ++)
         {
          result += keyList.get(i);
          result += ",";
         }
     return result;
 }        
}


