/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package BplusTree;

import java.util.Scanner;

/**
 *
 * @author Noah
 */

public class BplusTree
{
    private int index;
    private int e;
    private int treeHeight;
    
    Node Root = new Node(true);
    Node target;
    public BplusTree()
    {
        treeHeight = 1;
    }        
    
    public void incrementHeight()
    {
        treeHeight ++;
    }     
    
    public void elementInsert()
    {
     Scanner s = new Scanner(System.in);
     e = s.nextInt();
     target = search(e);
     //System.out.println(target.toString());
     target.setKey(e); 
     /*System.out.println(Root.getChildren().size());
     if (target.getParent() != null)
        { 
         System.out.println(target.getParent().getChildren().size());
        }*/ 
     traverse();
    }       
    
    public void Remove()
    {
        
    }               

    public void traverse()
    {
     target = Root;
     index = 0;
     while (target.getChildren().size() != 0)
           {
                System.out.print("Target: ");
                System.out.println(target.toString());
                System.out.print("Target's Kids: ");
                System.out.println(target.getChildren().toString());
                target.getChildren().get(index).setParent(target);
                target = target.getChildren().get(index);
                if (target.getChildren().size() == 0 && target != Root)
                   {
                    System.out.println("Leaf Node.");
                    target = target.getParent(); 
                    index ++;
                   }
                if (index == target.getChildren().size() && target != Root)
                   {
                    System.out.println("Covered all children.");
                    index = target.getParent().getChildren().indexOf(target);
                    target = target.getParent();
                    index ++;
                   }
                if (index == target.getChildren().size() && target == Root)
                   {
                    System.out.println("Done");
                    break;
                   }
                System.out.print("Index: ");
                System.out.println(index);
           } 
    }   
    
    public Node search(int e)
    {
     int ind;
     target = Root;
    
     if (target.itemSearch(e) == false)
        { 
         while (target.getChildren().size() != 0)
               { 
                ind = 0;
                //System.out.println("check");
                //System.out.println(target.getChildren().size());
                while(ind < target.getKeyList().size())
                     {
                      if (e < target.getKey(ind))
                         {
                          //target.getChild(ind).setParent(target);
                          //System.out.println(target.getChild(ind).getParent().toString());
                          target = target.getChild(ind);
                          break;
                         }
                      else if (e > target.getKey(target.getKeyList().size()-1))
                         {
                          //target.getChild(target.getChildCount()-1).setParent(target);
                          //System.out.println(target.getChild(ind).getParent().toString());
                          target = target.getChild(target.getChildren().size()-1);
                          break;
                         } 
                      ind ++;
                     }  
               }
           }
     //System.out.println("check2");
     //System.out.println(target.toString());
     return target;
    }
  
    public String toString()
    {
     index = 0;
     String result = "";
     target = Root;
     result += "Root: ";
     result += target.toString();
     result += "\n";
     
     for (int i = 0; i < target.getChildren().size(); i ++)
         {
          result += "|";
          result += target.getChild(i).toString();
          result += "| ";
         }
     result += "\n";
     target = Root;
     for (int i = 0; i < target.getChildren().size(); i ++)
         {
          System.out.print("i: ");
          System.out.println(i);
          //System.out.println(target.getChildren().size());
          target = target.getChild(i);
          System.out.print("target: ");
          System.out.println(target.toString());
          System.out.println(target.getParent().toString());
          if (target.getChildren().size() > 0)
             { 
              for (int q = 0; q < target.getChildren().size(); q ++)
                  {
                   result += "|";
                   result += target.getChild(q).toString();
                   result += "| ";
                  }
             }
          target = target.getParent();
         }
     result += "\n";
     return result;
    }      
}
